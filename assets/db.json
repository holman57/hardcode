{
  "Language": [
    "C",
    "Python",
    "Go",
    "C++",
    "PowerShell",
    "PHP",
    "C#",
    "Bash",
    "Rust",
    "Java",
    "JavaScript",
    "Ruby",
    "Kotlin",
    "Swift",
    "TypeScript",
    "Lua",
    "Scala",
    "Dart"
  ],
  "DB": [
    "MySQL",
    "T-SQL",
    "Oracle",
    "PostgreSQL",
    "SQLite",
    "Pandas",
    "Neo4j",
    "GraphQL",
    "MQL",
    "MariaDB",
    "MongoDB",
    "Redis",
    "HBase",
    "DynamoDB",
    "Cosmos DB",
    "Firestore",
    "Relational Algebra"
  ],
  "OOP": [
    "Java",
    "C#",
    "Python",
    "C++",
    "JavaScript"
  ],
  "Operating System": {
    "Names": [
      "Desktop",
      "Mobile"
    ],
    "Desktop": [
      "Windows",
      "Linux",
      "Mac"
    ],
    "Mobile": [
      "Android",
      "iOS"
    ]
  },
  "Language Structure": {
    "Variables": [
      "Declaration",
      "Data Types",
      "Mutability",
      "Multiple Inline Declarations",
      "Nullability"
    ],
    "Control Flow": [
      "If-Then",
      "If-Else",
      "Switch",
      "For",
      "While",
      "Do-While",
      "Break",
      "Continue",
      "Return",
      "Yield"
    ],
    "Strings": [
      "Declare",
      "Length",
      "Concatenation",
      "Slicing",
      "Interpolation"
    ],
    "Arrays": [
      "Declaration",
      "Accessing an Element",
      "Sum Elements",
      "Generators"
    ],
    "Operators": [
      "Arithmetic",
      "Logical",
      "Precedence",
      "Ternary"
    ],
    "Expressions": [
      "When"
    ],
    "Comments": [
      "Inline",
      "Block"
    ],
    "Functions": [
      "Declaration",
      "Overriding"
    ],
    "File-System Interface": [
      "Read from STDIN",
      "Write to STDOUT",
      "Read from a File",
      "Write to a File",
      "Directory Structure",
      "JSON",
      "XML"
    ],
    "Mathematics": [
      "Exponentiation",
      "Division",
      "Common Mathematical Expressions",
      "Combinatorics",
      "Monthly Interest Rate",
      "Accrued Value",
      "Confidence Interval",
      "Standard Error",
      "Combinations",
      "Permutations"
    ],
    "Date and Time Manipulation": [
      "Date",
      "Weekday"
    ],
    "Classes": [
      "Declaration",
      "Access Modifiers",
      "Attributes",
      "Methods",
      "Encapsulation",
      "Abstraction",
      "Inheritance",
      "Polymorphism",
      "Data Hiding",
      "Constructor",
      "Getters and Setters"
    ],
    "Algorithms": [
      "BFS",
      "DFS",
      "Divide and Conquer"
    ],
    "Data Structures": [
      "Array",
      "Linked List",
      "List",
      "Map",
      "Heap",
      "Stack",
      "Graph"
    ],
    "Dynamic Programming": [
      "Climbing Stairs"
    ],
    "Timers": [],
    "Event Loop": [
      "Blocking",
      "Asynchronous",
      "Event Queue",
      "API pool"
    ],
    "Iterators": [],
    "Processes": [],
    "Concurrency": [],
    "CPU Scheduling": [],
    "Synchronization": [],
    "Deadlocks": [],
    "Memory Management": []
  },
  "TODO": {
    "Names": [
      "Language",
      "DB"
    ],
    "Language": {
      "General": [
        "POSIX regular expressions",
        "GNU Grep, Awk, and sed",
        "Difference between Globs and Regex",
        "Types of Shell Expansion",
        "Mac, Linux, Windows shell scripting",
        "Socket Programming"
      ]
    },
    "DB": [
      {
        "General": [
          "Column-wise Operations"
        ]
      },
      {
        "SQL": [
          "Views",
          "Partition by",
          "Composite Keys",
          "Set Operators"
        ]
      }
    ]
  },
  "Networking": [
    "Socket Programming",
    "Data-Flow through a Network Stack",
    "OSI Model",
    "Application",
    "Network",
    "Link",
    "Session",
    "Presentation",
    "Transport",
    "Data",
    "Physical",
    "Common Protocols",
    "TCP",
    "UDP",
    "IP",
    "HTTP",
    "Ethernet",
    "Bluetooth",
    "DNS",
    "Network Services",
    "IP Addressing",
    "Subnetting"
  ],
  "Artificial Intelligence": {
    "Names": [
      "Machine Learning"
    ],
    "Machine Learning": {
      "Names": [
        "Missing Values",
        "Categorical Variables",
        "Frameworks"
      ],
      "Frameworks": [
        "sklearn",
        "Tensorflow",
        "PyTorch"
      ],
      "Missing Values": [
        "Drop Column",
        "Drop Row",
        "Imputation"
      ],
      "Categorical Variables": [
        "Cardinality",
        "Ordinal Encoding",
        "One-Hot Encoding"
      ]
    }
  },
  "General Language Notes": [
    "Always declare and initialize all your variables at the beginning of your scope.",
    "Statically typed programming languages are those in which variables need to be defined before they are used."
  ],
  "General DB Notes": [
    "A database system is self-describing because it not only contains the database itself, but also the meta-data which defines and describes the data and relationships between tables in the database.",
    "Insulation between the programs and data is also called program-data independence.",
    "A view is a subset of the database, which is defined and dedicated for particular users of the system. ",
    "Instead of using joins, NoSQL databases often use techniques such as embedding and referencing to combine data from multiple documents or collections.",
    "The simplest form of a NoSQL database is called a Key-Value database and it's designed kind of like a dictionary.",
    "A Document database is a type of NoSQL database that can store multiple key values in a structure called a document. Documents roughly parallel rows in a table. Keys are scalars. And values may be complex data structures such as arrays or lists.",
    "A Wide Column database is a type of NoSQL database where the columns are not fixed and the data is denormalized. The values can be complex structures such as arrays or lists.",
    "A Graph database is a type of NoSQL database that represents a network of connected entities. Entities are liked by edges. Entities and edges each have their own properties that can be queried."
  ],
  "Language Specific Notes": {
    "C": [
      "C is optimal for many processing-based applications like operating systems, embedded systems, device drivers, compilers, interpreters, micro processors, and micro controllers."
    ],
    "C#": [
      ".NET supports structs and classes.",
      "Structs are passed by copy, since they are value types.",
      "Objects are passed by reference, since they are reference types",
      "The .NET platform manages and reclaims blocks of memory",
      "The Garbage Collector object GC is part of the system namespace.",
      "Reference GC.GetTotalMemory(false); to see how much memory an application is using",
      "Every object derives from the base Object class, inheriting it's methods like ToString().",
      "C# supports the \"is\" operator",
      "Protected members can be accessed by the defining class or any subclass",
      "Private members can only be accessed by the defining class.",
      "The \"virtual\" keyword indicates that the method can be overridden by subclasses.\n",
      "If you don't provide a constructor for a class, the compiler will create a default one.",
      "Testing frameworks such as NUnit make C# amenable to test-driven development and thus a good language for use with Extreme Programming."
    ],
    "PowerShell": [
      "Cmdlets are in the form of Verb-Noun. For example, the command Get-ChildItem can be used to list our current directory."
    ],
    "Dart": [
      "Type inference allows us to declare a variable without explicitly mentioning the data type.",
      "In Dart, we can insert the var keyword in place of the data type.",
      "If you want a variable to hold objects of many types, you can declare a variable using the dynamic keyword.",
      "The type num is generic enough to hold both int and double."
    ],
    "Scala": [
      "While Scala is a pure object-oriented programming language, it is also fully functional.",
      "In Scala variables are immutable by default.",
      "Scala follows a Lazy Computation model where expressions are only evaluated when required. This increases performance by reducing compile time."
    ]
  },
  "DB Specific Notes": {
    "MongoDB": [
      "A collection in MongoDB is the same as a table in a relational databases.",
      "A document in MongoDB is the same as a row in a relational databases.",
      "A single entry in a collection is called a document.",
      "A filter query fetches documents from a collection.",
      "Operators are used to perform different filters or operations on a collection or a document.",
      "Aggregation pipelines are used to perform aggregations or join operations on multiple collections.",
      "Projection is used to select specific fields from a collection, reduce array data, and select specific fields from embedded documents.",
      "GridFS is used to store large files."
    ]
  },
  "Variables": {
    "Rust Int Variable Types": [
      "i8",
      "i16",
      "i32",
      "i64",
      "i128",
      "isize",
      "u8",
      "u16",
      "u32",
      "u64",
      "u128",
      "usuze"
    ],
    "Int Variable Names": [
      "myVar",
      "myvariable",
      "myNum",
      "num",
      "amount",
      "total",
      "quantity",
      "count",
      "rate",
      "limit"
    ],
    "Integer Small Variable Sets": [
      "x",
      "y",
      "n",
      "i",
      "j"
    ],
    "Random Variables": [
      "[extensible whitespace]",
      "[optional semicolon]",
      "[random int variable]",
      "[random integer]",
      "[random rust data type]"
    ],
    "Variable Permutations": [
      "[auto|var|val|int|Int|let|None]",
      "[local|auto|var|val|int|Int|let|None]",
      "[Object|object|Integer|declare -i|export]",
      "[: Integer|: Int|: number| int|None]",
      "[:=|=]",
      "[;|None]",
      "[$|@|None|[int]|_]",
      "[mut |None]"
    ],
    "Declaration": {
      "Notes": {
        "C#": [
          "C# provides an implicit type conversion using some data types char + int = int.",
          "You can initialize an integer using the default keyword, int num = default; default will be 0."
        ]
      },
      "Integer Assignment": {
        "Type": "Primitive Types",
        "Sub-Type": "Multi-Choice",
        "Question": [
          "How do you declare and assign an Integer variable in [language]?",
          "Which of the following is a correct way to assign an Integer value to a variable in [language]?",
          "Declare and assign an Integer variable in [language] using:",
          "Assignment and declaration of an Integer variable in [language] looks like,",
          "In [language], assigning and declaring an Integer variable is done by",
          "A Correct way of assigning and declaring an Integer variable using [language] is"
        ],
        "True-False": [
          "Is this a Correct way to declare and assign an Integer variable in [language]?",
          "The following is a Correct assignment and declaration of an Integer variable in [language].",
          "(T/F) An assignment and declaration of an Integer variable in [language]:",
          "In [language], the Correct way to assign and declare an Integer variable is"
        ],
        "Answers": {
          "Preferred": {
            "C": "int [random int variable] = [random integer];",
            "Python": "[random int variable] = [random integer]",
            "Go": "var [random int variable] int = [random integer]",
            "C++": "int [random int variable] = [random integer];",
            "PowerShell": "$[random int variable] = [random integer]",
            "PHP": "$[random int variable] = [random integer];",
            "C#": "int [random int variable] = [random integer];",
            "Bash": "[random int variable]=[random integer]",
            "Rust": "let mut [random int variable] = [random integer];",
            "Java": "int [random int variable] = [random integer];",
            "JavaScript": "var [random int variable] = [random integer];",
            "Ruby": "[random int variable] = [random integer]",
            "Kotlin": "var [random int variable] = [random integer]",
            "Swift": "var [random int variable] = [random integer]",
            "TypeScript": "var [random int variable] = [random integer];",
            "Lua": "local [random int variable] = [random integer]",
            "Scala": "var [random int variable] = [random integer]",
            "Dart": "int [random int variable] = [random integer];"
          },
          "Correct": {
            "C": [
              "int [random int variable][extensible whitespace]=[extensible whitespace][random integer];"
            ],
            "Python": [
              "[random int variable][extensible whitespace]=[extensible whitespace][random integer][optional semicolon]",
              "[random int variable]: int[extensible whitespace]=[extensible whitespace][random integer][optional semicolon]"
            ],
            "Go": [
              "[random int variable][extensible whitespace]:=[extensible whitespace][random integer][optional semicolon]",
              "var [random int variable][extensible whitespace]=[extensible whitespace][random integer][optional semicolon]",
              "var [random int variable] int[extensible whitespace]=[extensible whitespace][random integer][optional semicolon]"
            ],
            "C++": [
              "int [random int variable][extensible whitespace]=[extensible whitespace][random integer];",
              "auto [random int variable][extensible whitespace]=[extensible whitespace][random integer];"
            ],
            "PowerShell": [
              "$[random int variable][extensible whitespace]=[extensible whitespace][random integer][optional semicolon]",
              "[int][extensible whitespace]$[random int variable][extensible whitespace]=[extensible whitespace][random integer][optional semicolon]"
            ],
            "PHP": [
              "$[random int variable][extensible whitespace]=[extensible whitespace][random integer];"
            ],
            "C#": [
              "int [random int variable][extensible whitespace]=[extensible whitespace][random integer];",
              "var [random int variable][extensible whitespace]=[extensible whitespace][random integer];",
              "object [random int variable][extensible whitespace]=[extensible whitespace][random integer];"
            ],
            "Bash": [
              "[random int variable]=[random integer][optional semicolon]",
              "declare -i [random int variable]=[random integer][optional semicolon]",
              "export [random int variable]=[random integer][optional semicolon]",
              "let [random int variable]=[random integer][optional semicolon]"
            ],
            "Rust": [
              "let mut [random int variable]: [random rust data type][extensible whitespace]=[extensible whitespace][random integer];",
              "let [random int variable]: [random rust data type][extensible whitespace]=[extensible whitespace][random integer];",
              "let mut [random int variable][extensible whitespace]=[extensible whitespace][random integer];",
              "let [random int variable][extensible whitespace]=[extensible whitespace][random integer];"
            ],
            "Java": [
              "int [random int variable][extensible whitespace]=[extensible whitespace][random integer];",
              "var [random int variable][extensible whitespace]=[extensible whitespace][random integer];",
              "Integer [random int variable][extensible whitespace]=[extensible whitespace][random integer];",
              "Object [random int variable][extensible whitespace]=[extensible whitespace][random integer];"
            ],
            "JavaScript": [
              "var [random int variable][extensible whitespace]=[extensible whitespace][random integer][optional semicolon]",
              "let [random int variable][extensible whitespace]=[extensible whitespace][random integer][optional semicolon]",
              "[random int variable][extensible whitespace]=[extensible whitespace][random integer][optional semicolon]"
            ],
            "Ruby": [
              "[random int variable][extensible whitespace]=[extensible whitespace][random integer][optional semicolon]",
              "@[random int variable][extensible whitespace]=[extensible whitespace][random integer][optional semicolon]"
            ],
            "Kotlin": [
              "var [random int variable][extensible whitespace]=[extensible whitespace][random integer][optional semicolon]",
              "val [random int variable][extensible whitespace]=[extensible whitespace][random integer][optional semicolon]"
            ],
            "Swift": [
              "var [random int variable][extensible whitespace]=[extensible whitespace][random integer][optional semicolon]",
              "let [random int variable][extensible whitespace]=[extensible whitespace][random integer][optional semicolon]",
              "var [random int variable]: Int[extensible whitespace]=[extensible whitespace][random integer][optional semicolon]",
              "let [random int variable]: Int[extensible whitespace]=[extensible whitespace][random integer][optional semicolon]"
            ],
            "TypeScript": [
              "var [random int variable][extensible whitespace]=[extensible whitespace][random integer];",
              "let [random int variable][extensible whitespace]=[extensible whitespace][random integer];",
              "var [random int variable]: number[extensible whitespace]=[extensible whitespace][random integer];",
              "let [random int variable]: number[extensible whitespace]=[extensible whitespace][random integer];"
            ],
            "Lua": [
              "[random int variable][extensible whitespace]=[extensible whitespace][random integer][optional semicolon]",
              "local [random int variable][extensible whitespace]=[extensible whitespace][random integer][optional semicolon]"
            ],
            "Scala": [
              "var [random int variable][extensible whitespace]=[extensible whitespace][random integer][optional semicolon]",
              "val [random int variable][extensible whitespace]=[extensible whitespace][random integer][optional semicolon]",
              "var [random int variable]: Int[extensible whitespace]=[extensible whitespace][random integer][optional semicolon]",
              "val [random int variable]: Int[extensible whitespace]=[extensible whitespace][random integer][optional semicolon]"
            ],
            "Dart": [
              "int [random int variable][extensible whitespace]=[extensible whitespace][random integer];",
              "var [random int variable][extensible whitespace]=[extensible whitespace][random integer];"
            ]
          },
          "Incorrect": [
            {
              "Name": "Group1",
              "Pattern": "[auto|var|val|int|Int|let|None] [random int variable] = [random integer][;|None]",
              "Priority": 12
            },
            {
              "Name": "Group2",
              "Pattern": "[local|auto|var|val|int|Int|let|None] [random int variable][: Integer|: Int|: number| int|None] = [random integer][;|None]",
              "Priority": 7
            },
            {
              "Name": "Group3",
              "Pattern": "[Object|object|Integer|declare -i|export] [random int variable] = [random integer][;|None]",
              "Priority": 5
            },
            {
              "Name": "Group4",
              "Pattern": "[random int variable] [:=|=] [random integer][;|None]",
              "Priority": 5
            },
            {
              "Name": "Group5",
              "Pattern": "[$|@|None|[int]|_][random int variable] = [random integer][;|None]",
              "Priority": 4
            },
            {
              "Name": "Group6",
              "Pattern": "[$|@|None|[int]|_][random int variable]=[random integer][;|None]",
              "Priority": 3
            },
            {
              "Name": "Group7",
              "Pattern": "let [mut |None][random int variable]: [random rust data type] = [random integer][;|None]",
              "Priority": 2
            },
            {
              "Name": "Group8",
              "Pattern": "let [mut |None][random int variable] = [random integer][;|None]",
              "Priority": 2
            },
            {
              "Name": "Group9",
              "Pattern": "[$|@|None|[int]|_][random int variable] = [random integer][;|None]",
              "Priority": 2
            }
          ]
        }
      },
      "Floating-Point Assignment": {
        "Type": "Primitive Types",
        "Sub-Type": "Multi-Choice",
        "Question": [
          "How do you declare and assign a Floating-Point variable in [language]?"
        ],
        "True-False": [
          "Is this a Correct way to declare and assign an Floating-Point variable in [language]?"
        ],
        "Answers": {
          "Preferred": {
            "C": "int [random float variable] = [random float];",
            "Python": "[random float variable] = [random float]",
            "Go": "var [random float variable] int = [random float]",
            "C++": "int [random float variable] = [random float];",
            "PowerShell": "$[random float variable] = [random float]",
            "PHP": "$[random float variable] = [random float];",
            "C#": "int [random float variable] = [random float];",
            "Bash": "[random float variable]=[random float]",
            "Rust": "let mut [random float variable] = [random float];",
            "Java": "int [random float variable] = [random float];",
            "JavaScript": "var [random float variable] = [random float];",
            "Ruby": "[random float variable] = [random float]",
            "Kotlin": "var [random float variable] = [random float]",
            "Swift": "var [random float variable] = [random float]",
            "TypeScript": "var [random float variable] = [random float];",
            "Lua": "local [random float variable] = [random float]",
            "Scala": "var [random float variable] = [random float]",
            "Dart": "int [random float variable] = [random float];"
          },
          "Correct": {
            "C": [
              "int [random float variable][extensible whitespace]=[extensible whitespace][random float];"
            ],
            "Python": [
              "[random float variable][extensible whitespace]=[extensible whitespace][random float][optional semicolon]",
              "[random float variable]: float[extensible whitespace]=[extensible whitespace][random float][optional semicolon]"
            ],
            "Go": [
              "[random float variable][extensible whitespace]:=[extensible whitespace][random float][optional semicolon]",
              "var [random float variable][extensible whitespace]=[extensible whitespace][random float][optional semicolon]",
              "var [random float variable] float[extensible whitespace]=[extensible whitespace][random float][optional semicolon]"
            ],
            "C++": [
              "float [random float variable][extensible whitespace]=[extensible whitespace][random float];",
              "auto [random float variable][extensible whitespace]=[extensible whitespace][random float];"
            ],
            "PowerShell": [
              "$[random float variable][extensible whitespace]=[extensible whitespace][random float][optional semicolon]",
              "[float][extensible whitespace]$[random float variable][extensible whitespace]=[extensible whitespace][random float][optional semicolon]"
            ],
            "PHP": [
              "$[random float variable][extensible whitespace]=[extensible whitespace][random float];"
            ],
            "C#": [
              "int [random float variable][extensible whitespace]=[extensible whitespace][random float];",
              "var [random float variable][extensible whitespace]=[extensible whitespace][random float];",
              "object [random float variable][extensible whitespace]=[extensible whitespace][random float];"
            ],
            "Bash": [
              "[random float variable]=[random float][optional semicolon]",
              "declare -f [random float variable]=[random float][optional semicolon]",
              "export [random float variable]=[random float][optional semicolon]",
              "let [random float variable]=[random float][optional semicolon]"
            ],
            "Rust": [
              "let mut [random float variable]: [random rust float data type][extensible whitespace]=[extensible whitespace][random float];",
              "let [random float variable]: [random rust float data type][extensible whitespace]=[extensible whitespace][random float];",
              "let mut [random float variable][extensible whitespace]=[extensible whitespace][random float];",
              "let [random float variable][extensible whitespace]=[extensible whitespace][random float];"
            ],
            "Java": [
              "float [random float variable][extensible whitespace]=[extensible whitespace][random float];",
              "var [random float variable][extensible whitespace]=[extensible whitespace][random float];",
              "Float [random float variable][extensible whitespace]=[extensible whitespace][random float];",
              "Object [random float variable][extensible whitespace]=[extensible whitespace][random float];"
            ],
            "JavaScript": [
              "var [random float variable][extensible whitespace]=[extensible whitespace][random float][optional semicolon]",
              "let [random float variable][extensible whitespace]=[extensible whitespace][random float][optional semicolon]",
              "[random float variable][extensible whitespace]=[extensible whitespace][random float][optional semicolon]"
            ],
            "Ruby": [
              "[random float variable][extensible whitespace]=[extensible whitespace][random float][optional semicolon]",
              "@[random float variable][extensible whitespace]=[extensible whitespace][random float][optional semicolon]"
            ],
            "Kotlin": [
              "var [random float variable][extensible whitespace]=[extensible whitespace][random float][optional semicolon]",
              "val [random float variable][extensible whitespace]=[extensible whitespace][random float][optional semicolon]"
            ],
            "Swift": [
              "var [random float variable][extensible whitespace]=[extensible whitespace][random float][optional semicolon]",
              "let [random float variable][extensible whitespace]=[extensible whitespace][random float][optional semicolon]",
              "var [random float variable]: Int[extensible whitespace]=[extensible whitespace][random float][optional semicolon]",
              "let [random float variable]: Int[extensible whitespace]=[extensible whitespace][random float][optional semicolon]"
            ],
            "TypeScript": [
              "var [random float variable][extensible whitespace]=[extensible whitespace][random float];",
              "let [random float variable][extensible whitespace]=[extensible whitespace][random float];",
              "var [random float variable]: number[extensible whitespace]=[extensible whitespace][random float];",
              "let [random float variable]: number[extensible whitespace]=[extensible whitespace][random float];"
            ],
            "Lua": [
              "[random float variable][extensible whitespace]=[extensible whitespace][random float][optional semicolon]",
              "local [random float variable][extensible whitespace]=[extensible whitespace][random float][optional semicolon]"
            ],
            "Scala": [
              "var [random float variable][extensible whitespace]=[extensible whitespace][random float][optional semicolon]",
              "val [random float variable][extensible whitespace]=[extensible whitespace][random float][optional semicolon]",
              "var [random float variable]: Int[extensible whitespace]=[extensible whitespace][random float][optional semicolon]",
              "val [random float variable]: Int[extensible whitespace]=[extensible whitespace][random float][optional semicolon]"
            ],
            "Dart": [
              "int [random float variable][extensible whitespace]=[extensible whitespace][random float];",
              "var [random float variable][extensible whitespace]=[extensible whitespace][random float];"
            ]
          },
          "Incorrect": [
            {
              "Name": "Group1",
              "Pattern": "[auto|var|val|int|Int|let|None] [random int variable] = [random integer][;|None]",
              "Priority": 12
            },
            {
              "Name": "Group2",
              "Pattern": "[local|auto|var|val|int|Int|let|None] [random int variable][: Integer|: Int|: number| int|None] = [random integer][;|None]",
              "Priority": 7
            },
            {
              "Name": "Group3",
              "Pattern": "[Object|object|Integer|declare -i|export] [random int variable] = [random integer][;|None]",
              "Priority": 5
            },
            {
              "Name": "Group4",
              "Pattern": "[random int variable] [:=|=] [random integer][;|None]",
              "Priority": 5
            },
            {
              "Name": "Group5",
              "Pattern": "[$|@|None|[int]|_][random int variable] = [random integer][;|None]",
              "Priority": 4
            },
            {
              "Name": "Group6",
              "Pattern": "[$|@|None|[int]|_][random int variable]=[random integer][;|None]",
              "Priority": 3
            },
            {
              "Name": "Group7",
              "Pattern": "let [mut |None][random int variable]: [random rust data type] = [random integer][;|None]",
              "Priority": 2
            },
            {
              "Name": "Group8",
              "Pattern": "let [mut |None][random int variable] = [random integer][;|None]",
              "Priority": 2
            },
            {
              "Name": "Group9",
              "Pattern": "[$|@|None|[int]|_][random int variable] = [random integer][;|None]",
              "Priority": 2
            }
          ]
        }
      },
      "Data Types": {
        "Notes": {
          "General": []
        },
        "Multi-Choice": {
          "Type": "Primitive Types",
          "Sub-Type": "Floating Point Assignment",
          "Question": [
            "How do you declare and assign an Integer variable in [language]?",
            "Which of the following is a correct way to assign an Integer value to a variable in [language]?",
            "Declare and assign an Integer variable in [language] using:",
            "Assignment and declaration of an Integer variable in [language] looks like,",
            "In [language], assigning and declaring an Integer variable is done by",
            "A Correct way of assigning and declaring an Integer variable using [language] is"
          ],
          "True-False": [
            "Is this a Correct way to declare and assign an Integer variable in [language]?",
            "The following is a Correct assignment and declaration of an Integer variable in [language].",
            "(T/F) An assignment and declaration of an Integer variable in [language]:",
            "In [language], the Correct way to assign and declare an Integer variable is"
          ],
          "Answers": {},
          "Mutability": [],
          "Multiple Declaration": []
        }
      }
    }
  },
  "Control Flow": {
    "Notes": {
      "C": [],
      "Python": [],
      "Go": [],
      "C++": [],
      "PowerShell": [],
      "PHP": [],
      "C#": [],
      "Bash": [],
      "Rust": [],
      "Java": [],
      "JavaScript": [],
      "Ruby": [],
      "Kotlin": [],
      "Swift": [],
      "TypeScript": [],
      "Lua": [],
      "Scala": [],
      "Dart": []
    },
    "If-Then": {
      "Multi-Choice": {
        "Type": "Conditional Logic",
        "Sub-Type": "If Statement",
        "Question": [
          "How do you write an If statement in [language]?"
        ],
        "True-False": [
          "Is this the correct way to write an If statement in [language]?"
        ],
        "Answers": {
          "Preferred": {
            "C": "if ([expression]) {[code block]}",
            "Python": "if [expression]:[code block]",
            "Go": "if [expression] {[code block]}",
            "C++": "if ([expression]) {[code block]}",
            "PowerShell": "if ([expression]) {[code block]}",
            "PHP": "if ([expression]) {[code block]}",
            "C#": "if ([expression]) {[code block]}",
            "Bash": "if [ [expression] ]; then [code block] fi",
            "Rust": "if [expression] {[code block]}",
            "Java": "if ([expression]) {[code block]}",
            "JavaScript": "if ([expression]) {[code block]}",
            "Ruby": "if [expression] [code block] end",
            "Kotlin": "if ([expression]) {[code block]}",
            "Swift": "if ([expression]) {[code block]}",
            "TypeScript": "if ([expression]) {[code block]}",
            "Lua": "if [expression] then [code block] end",
            "Scala": "if ([expression]) {[code block]}",
            "Dart": "if ([expression]) {[code block]}"
          },
          "Correct": {
            "C": [],
            "Python": [],
            "Go": [],
            "C++": [],
            "PowerShell": [],
            "PHP": [],
            "C#": [],
            "Bash": [],
            "Rust": [],
            "Java": [],
            "JavaScript": [],
            "Ruby": [],
            "Kotlin": [],
            "Swift": [],
            "TypeScript": [],
            "Lua": [],
            "Scala": [],
            "Dart": []
          },
          "Incorrect": [
            {
              "Name": "Group1",
              "Pattern": "",
              "Priority": 0
            }
          ]
        }
      }
    }
  },
  "Arrays": {
    "Notes": {
      "C": [
        "C arrays must be declared with a size."
      ],
      "Python": [],
      "Go": [],
      "C++": [],
      "PowerShell": [],
      "PHP": [],
      "C#": [],
      "Bash": [
        "Unlike numerically indexed, the associative arrays must be declared before they can be used.",
        "Numeric arrays are declared using a Lowercase a (declare -a arr_name)",
        "Associative arrays are declared using an Uppercase A (declare -A arr_name)"
      ],
      "Rust": [],
      "Java": [],
      "JavaScript": [],
      "Ruby": [],
      "Kotlin": [],
      "Swift": [],
      "TypeScript": [],
      "Lua": [],
      "Scala": [],
      "Dart": []
    },
    "Declaration": {
      "Multi-Choice": {
        "Type": "Array Declaration",
        "Sub-Type": "Integer Array",
        "Question": [
          "How do you declare an array of Integers in [language]?"
        ],
        "True-False": [],
        "Answers": {
          "Preferred": {
            "C": "int [random array name][[random integer]];",
            "Python": "[random array name] = []",
            "Go": "var [random array name] [[random integer]]int",
            "C++": "int [random array name][[random integer]];",
            "PowerShell": "$[random array name] = @()",
            "PHP": "$[random array name] = array();",
            "C#": "int[] [random array name];",
            "Bash": "declare -a [random array name]",
            "Rust": "let mut [random array name]: [[rust int data type]; [random small int]] = [0; [random small int]];",
            "Java": "int [random array name][];",
            "JavaScript": "let [random array name] = [];",
            "Ruby": "[random array name] = Array.new",
            "Kotlin": "val [random array name] = arrayOf([random sequence])",
            "Swift": "var [random array name]: [Integer] = []",
            "TypeScript": "let [random array name]: number[] = [];",
            "Lua": "[random array name] = {}",
            "Scala": "val [random array name]: Array[Int] = Array()",
            "Dart": "var [random array name] = new List([random integer]);"
          },
          "Correct": {
            "C": [],
            "Python": [],
            "Go": [],
            "C++": [],
            "PowerShell": [],
            "PHP": [],
            "C#": [],
            "Bash": [],
            "Rust": [
              "let variable_name = [value1,value2,value3];",
              "let variable_name:[dataType;size] = [value1,value2,value3];",
              "let variable_name:[dataType;size] = [default_value_for_elements,size];"
            ],
            "Java": [
              "int [random array name][];",
              "int[] [random array name];"
            ],
            "JavaScript": [
              "let [random array name] = [];",
              "var [random array name] = [];",
              "[random array name] = [];"
            ],
            "Ruby": [
              "[random array name] = Array.new([random integer])",
              "[random array name] = Array.new([random integer], [random string])",
              "[random array name] = Array.[]([random sequence])",
              "[random array name] = Array.[[random sequence]]",
              "[random array name] = Array([random .. sequence])"
            ],
            "Kotlin": [
              "val [random array name] = IntArray([random integer])"
            ],
            "Swift": [
              "var [random array name]: Array<Integer> = Array()"
            ],
            "TypeScript": [
              "let [random array name]: number[] = new Array();",
              "let [random array name]: number[] = Array();",
              "let [random array name]: Array<number> = [];",
              "let [random array name]: Array<number> = new Array();",
              "let [random array name]: Array<number> = Array();",
              "let [random array name] = [] as number[];",
              "let [random array name] = new Array() as Array<number>;",
              "let [random array name] = Array() as number[];",
              "let [random array name] = <number[]>[];",
              "let [random array name] = <Array<number>> new Array();",
              "let [random array name] = <number[]> Array();",
              "let [random array name] = new Array<number>();",
              "let [random array name] = Array<number>();"
            ],
            "Lua": [],
            "Scala": [],
            "Dart": []
          },
          "Incorrect": [
            {
              "Name": "Group1",
              "Pattern": "",
              "Priority": 0
            }
          ]
        }
      }
    },
    "Sum Elements": {
      "Notes": {
        "JavaScript": [
          "var sum = arr => arr.reduce((a,b) => a + b);"
        ]
      },
      "Multi-Choice": {
        "Type": "Array General",
        "Sub-Type": "Array Declaration",
        "Question": [],
        "Answers": {}
      }
    }
  },
  "Algorithms": {
    "Notes": {
      "C": [],
      "Python": [],
      "Go": [],
      "C++": [],
      "PowerShell": [],
      "PHP": [],
      "C#": [],
      "Bash": [],
      "Rust": [],
      "Java": [],
      "JavaScript": [],
      "Ruby": [],
      "Kotlin": [],
      "Swift": [],
      "TypeScript": [],
      "Lua": [],
      "Scala": [],
      "Dart": []
    },
    "Depth First Search": {
      "Multi-Choice": {
        "Type": "",
        "Sub-Type": "",
        "Question": [
          ""
        ],
        "True-False": [
          ""
        ],
        "Answers": {
          "Preferred": {
            "C": "",
            "Python": "",
            "Go": "",
            "C++": "",
            "PowerShell": "",
            "PHP": "",
            "C#": "",
            "Bash": "",
            "Rust": "",
            "Java": "",
            "JavaScript": "",
            "Ruby": "",
            "Kotlin": "",
            "Swift": ""
          },
          "Correct": {
            "C": [],
            "Python": [],
            "Go": [],
            "C++": [],
            "PowerShell": [],
            "PHP": [],
            "C#": [],
            "Bash": [],
            "Rust": [],
            "Java": [],
            "JavaScript": [],
            "Ruby": [],
            "Kotlin": [],
            "Swift": [],
            "TypeScript": [],
            "Lua": [],
            "Scala": [],
            "Dart": []
          },
          "Incorrect": [
            {
              "Name": "Group1",
              "Pattern": "",
              "Priority": 0
            }
          ]
        }
      }
    }
  },
  "Data Structures": {
    "Notes": {
      "C": [],
      "Python": [],
      "Go": [],
      "C++": [],
      "PowerShell": [],
      "PHP": [],
      "C#": [],
      "Bash": [],
      "Rust": [],
      "Java": [],
      "JavaScript": [],
      "Ruby": [],
      "Kotlin": [],
      "Swift": [],
      "TypeScript": [],
      "Lua": [],
      "Scala": [],
      "Dart": []
    },
    "Linked List": {
      "Multi-Choice": {
        "Type": "",
        "Sub-Type": "",
        "Question": [
          ""
        ],
        "True-False": [
          ""
        ],
        "Answers": {
          "Preferred": {
            "C": "",
            "Python": "",
            "Go": "",
            "C++": "",
            "PowerShell": "",
            "PHP": "",
            "C#": "",
            "Bash": "",
            "Rust": "",
            "Java": "",
            "JavaScript": "",
            "Ruby": "",
            "Kotlin": "",
            "Swift": "",
            "TypeScript": "",
            "Lua": "",
            "Scala": "",
            "Dart": ""
          },
          "Correct": {
            "C": [],
            "Python": [],
            "Go": [],
            "C++": [],
            "PowerShell": [],
            "PHP": [],
            "C#": [],
            "Bash": [],
            "Rust": [],
            "Java": [],
            "JavaScript": [],
            "Ruby": [],
            "Kotlin": [],
            "Swift": [],
            "TypeScript": [],
            "Lua": [],
            "Scala": [],
            "Dart": []
          },
          "Incorrect": [
            {
              "Name": "Group1",
              "Pattern": "",
              "Priority": 0
            }
          ]
        }
      }
    }
  }
}
